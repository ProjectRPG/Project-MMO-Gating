buildscript {
    repositories {
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0,6.2)'
}
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

mixin {
    config "${modid}.mixins.json"
    add sourceSets.main, "${modid}.refmap.json"
    disableEclipseAddon = true
    debug.export = true
}

version = "1.20.0-${mod_version}"
group = "rpg.project.${modid}" 
archivesBaseName = "${modid}"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft { 
    mappings channel: 'parchment', version: '1.19.3-2023.03.12-1.20'
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run/client')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${modid}"
            mods {
                pmmogating {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run/server')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${modid}"
            mods {
                pmmogating {
                    source sourceSets.main
                }
            }
        }
        
        gameTestServer {
            workingDirectory project.file('run/test')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', "${modid}"
            mods {
                pmmogating {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run/client')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', "${modid}", '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
            mods {
                pmmogating {
                    source sourceSets.main
                    //forceExit = false
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
	flatDir {
        dirs '../ProjectRPG/build/libs'
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.20-46.0.14'
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    
    implementation fg.deobf('local.maven:projectrpg:1.20.0-0.0.1')
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
//def replaceProperties = [
//        minecraft_version: minecraft_version, minecraft_version_range: minecraft_version_range,
//        forge_version: forge_version, forge_version_range: forge_version_range,
//        loader_version_range: loader_version_range,
//        mod_id: mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
//        mod_authors: mod_authors, mod_description: mod_description
//]
//processResources {
//    inputs.properties replaceProperties
//    replaceProperties.put 'project', project

//    filesMatching(resourceTargets) {
//        expand replaceProperties
//    }
//}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "${displayname}",
                "Specification-Vendor"    : "Project MMO: Gating",
                "Specification-Version"   : "1", 
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Project MMO",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(Copy).all {
    duplicatesStrategy 'exclude'
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' 
}